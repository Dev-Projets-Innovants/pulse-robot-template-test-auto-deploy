
name: Deploy Application (Vite React TS)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# D√©clencheurs
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
on:
  push:
    branches:
      - main
      - development_test    # ta branche Dev + Test
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Job unique
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
jobs:
  deploy:
    runs-on: windows-latest                       # runner Windows pour ton script PS1
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development_test' }}

    steps:
    # 1. Checkout
    - uses: actions/checkout@v4

    # 2. Node 18 + cache npm
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: npm

    # 3. D√©pendances
    - name: Install dependencies
      run: npm ci

    # 4. Variables / secrets selon la branche
    - name: Set runtime env vars
      shell: powershell
      run: |
        if ("${{ github.ref }}" -eq "refs/heads/main") {
          echo "DEPLOY_ENV=prod" >> $env:GITHUB_ENV
          echo "VITE_SUPABASE_URL=${{ vars.VITE_SUPABASE_URL_PROD }}" >> $env:GITHUB_ENV
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY_PROD }}" >> $env:GITHUB_ENV
          echo "SUPABASE_PROJECT_REF=${{ vars.SUPABASE_PROJECT_REF_PROD }}" >> $env:GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PROD }}" >> $env:GITHUB_ENV
        } else {
          echo "DEPLOY_ENV=dev" >> $env:GITHUB_ENV
          echo "VITE_SUPABASE_URL=${{ vars.VITE_SUPABASE_URL_DEV }}" >> $env:GITHUB_ENV
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY_DEV }}" >> $env:GITHUB_ENV
          echo "SUPABASE_PROJECT_REF=${{ vars.SUPABASE_PROJECT_REF_DEV }}" >> $env:GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY_DEV }}" >> $env:GITHUB_ENV
        }

    # 5. Installe la CLI Supabase
    - uses: supabase/setup-cli@v1
      with:
        version: latest

    # 6. Linke le projet Supabase
    - name: Link Supabase project
      shell: pwsh
      env:
        SUPABASE_PROJECT_REF: ${{ env.SUPABASE_PROJECT_REF }}          # r√©cup√©r√© de GITHUB_ENV
        SUPABASE_SERVICE_ROLE_KEY: ${{ env.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        Write-Host "üîé Project ref = $env:SUPABASE_PROJECT_REF"
        supabase link --project-ref $env:SUPABASE_PROJECT_REF --password $env:SUPABASE_SERVICE_ROLE_KEY

    # 7. Applique les migrations
    - name: Run Supabase migrations
      shell: pwsh
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: supabase db push

    # 8. Build Vite (dist/)
    - name: Build application
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ env.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ env.VITE_SUPABASE_ANON_KEY }}

    # 9. Simulation de d√©ploiement
    - name: Run deployment simulation
      shell: pwsh
      run: ./scripts/simulate-ftp-deploy.ps1 -EnvName "${{ env.DEPLOY_ENV }}"

    # 10. Message final
    - name: Deployment complete
      shell: pwsh
      run: |
        Write-Output "üéâ Deployment to $env:DEPLOY_ENV completed successfully!"
        Write-Output "üìÅ Files deployed to: C:\DeploySimulation\$env:DEPLOY_ENV"
