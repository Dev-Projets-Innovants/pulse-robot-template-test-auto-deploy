name: Deploy Application (Vite React TS)

# ────────────────────
# Déclencheurs
# ────────────────────
on:
  push:
    branches: [main, development_test]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: dev
        type: choice
        options: [dev, prod]

# ────────────────────
# Job unique
# ────────────────────
jobs:
  deploy:
    runs-on: windows-latest

    # Environnement GitHub ciblé : production ou development-test
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development-test' }}

    # Variables/Secrets injectés pour toutes les steps
    env:
      # Variables communes
      SUPABASE_PROJECT_REF:     ${{ vars.SUPABASE_PROJECT_REF }}
      SUPABASE_URL:             ${{ vars.SUPABASE_URL }}

      # Secrets
      SUPABASE_ANON_KEY:        ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SUPABASE_DB_PASSWORD:     ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_ACCESS_TOKEN:    ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      # Exposées au front Vite
      VITE_SUPABASE_URL:        ${{ vars.SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY:   ${{ secrets.SUPABASE_ANON_KEY }}

      # Pour la simulation FTP
      DEPLOY_ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
    # 1) Checkout
    - uses: actions/checkout@v4

    # 2) Node 18 + cache npm
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: npm

    # 3) Installe la CLI Supabase
    - uses: supabase/setup-cli@v1
      with:
        version: latest

    # 4) Lier le projet Supabase (mot de passe = DB_PASSWORD)
    - name: Link Supabase project
      shell: pwsh
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        Write-Host "🔗 Linking project $env:SUPABASE_PROJECT_REF"
        supabase link --project-ref $env:SUPABASE_PROJECT_REF --password $env:SUPABASE_DB_PASSWORD

    # 5) Appliquer les migrations
    - name: Run Supabase migrations
      shell: pwsh
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: supabase db push

    # 6) Build Vite (dist/)
    - name: Build application
      run: |
        npm ci
        npm run build

    # 7) Simulation de déploiement FTP
    - name: Run deployment simulation
      shell: pwsh
      run: ./scripts/simulate-ftp-deploy.ps1 -EnvName "$env:DEPLOY_ENV"

    # 8) Message final
    - name: Deployment complete
      shell: pwsh
      run: |
        Write-Host "🎉 Deployment to $env:DEPLOY_ENV completed!"
        Write-Host "📁 Files copied to C:\DeploySimulation\$env:DEPLOY_ENV"
