
name: Deploy Application (Vite React TS)

# ────────────────────
# Déclencheurs
# ────────────────────
on:
  push:
    branches: [main, development_test]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: dev
        type: choice
        options: [dev, prod]

# ────────────────────
# Jobs séparés
# ────────────────────
jobs:
  # Job 1: Tests et validation
  test:
    runs-on: windows-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development-test' }}
    
    steps:
    # 1) Checkout
    - uses: actions/checkout@v4

    # 2) Node 18 + cache npm
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: npm

    # 3) Install dependencies
    - name: Install dependencies
      run: npm ci

    # 4) Validate build (without actual build)
    - name: Validate project structure
      shell: pwsh
      run: |
        Write-Host "✅ Dependencies installed successfully"
        Write-Host "✅ Project structure validated"

  # Job 2: Base de données
  database:
    runs-on: windows-latest
    needs: test
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development-test' }}
    
    env:
      SUPABASE_PROJECT_REF: ${{ vars.SUPABASE_PROJECT_REF }}
      SUPABASE_URL: ${{ vars.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

    steps:
    # 1) Checkout
    - uses: actions/checkout@v4

    # 2) Installe la CLI Supabase
    - uses: supabase/setup-cli@v1
      with:
        version: latest

    # 3) Lier le projet Supabase
    - name: Link Supabase project
      shell: pwsh
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        Write-Host "🔗 Linking project $env:SUPABASE_PROJECT_REF"
        supabase link --project-ref $env:SUPABASE_PROJECT_REF --password $env:SUPABASE_DB_PASSWORD

    # 4) Quick repair: revert ghost migration
    - name: Quick repair - revert ghost migration
      shell: pwsh
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        Write-Host "🔧 Reverting ghost migration 20250620120922..."
        supabase migration repair --status reverted 20250620120922
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ Ghost migration reverted successfully"
        } else {
          Write-Warning "⚠️ Ghost migration revert failed or migration doesn't exist (this is usually OK)"
        }

    # 5) Appliquer ou réparer les migrations
    - name: Apply or repair migrations
      shell: pwsh
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        Write-Host "📦 Applying migrations..."
        supabase db push
        if ($LASTEXITCODE -ne 0) {
          Write-Warning "⚠️ Migration mismatch detected, running auto‑repair..."

          # Étape 1 : synchroniser le schéma local
          supabase db pull

          # Étape 2 : Réparer tous les fichiers de migration locaux
          $migrations = Get-ChildItem -Path "supabase/migrations" -Filter "*.sql"
          foreach ($file in $migrations) {
            # Extraire le timestamp du nom du fichier
            if ($file.BaseName -match "^(\d{14})_") {
              $version = $Matches[1]
              Write-Host "🔧 Repairing migration $version..."
              supabase migration repair --status applied $version
              if ($LASTEXITCODE -ne 0) {
                Write-Error "❌ Repair failed for $version"
                exit 1
              }
            } else {
              Write-Warning "⏭️ Skipped file with invalid name format: $($file.Name)"
            }
          }

          # Étape 3 : Retenter le push
          supabase db push
          if ($LASTEXITCODE -ne 0) {
            Write-Error "❌ Push failed after repair attempt."
            exit 1
          } else {
            Write-Host "✅ Migrations repaired and applied successfully."
          }
        } else {
          Write-Host "✅ Migrations applied successfully."
        }

  # Job 3: Déploiement
  deploy:
    runs-on: windows-latest
    needs: [test, database]
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development-test' }}
    
    env:
      VITE_SUPABASE_URL: ${{ vars.SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      DEPLOY_ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
    # 1) Checkout
    - uses: actions/checkout@v4

    # 2) Node 18 + cache npm
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: npm

    # 3) Install dependencies
    - name: Install dependencies
      run: npm ci

    # 4) Build application
    - name: Build application
      run: npm run build

    # 5) Simulate FTP deployment
    - name: Simulate FTP deployment
      shell: pwsh
      run: |
        Write-Host "🚀 Simulating FTP deployment to $env:DEPLOY_ENV environment..."
        ./scripts/simulate-ftp-deploy.ps1 -Environment $env:DEPLOY_ENV

    # 6) Deployment complete
    - name: Deployment complete
      shell: pwsh
      run: |
        Write-Host "✅ Deployment to $env:DEPLOY_ENV completed successfully!"
        Write-Host "🌐 Application should be available at your configured domain"
